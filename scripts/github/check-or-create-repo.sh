#!/bin/bash
# GitHub Repository Check and Creation Script
# Usage: ./check-or-create-repo.sh [--auto-create]

set -e

AUTO_CREATE=${1:-""}

# Color output functions
red() { echo -e "\033[31m$1\033[0m"; }
green() { echo -e "\033[32m$1\033[0m"; }
yellow() { echo -e "\033[33m$1\033[0m"; }
blue() { echo -e "\033[34m$1\033[0m"; }

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
  red "Error: Not in a git repository"
  exit 1
fi

# Check if gh CLI is installed
if ! command -v gh &>/dev/null; then
  red "Error: GitHub CLI (gh) is not installed"
  echo "Please install it from https://cli.github.com/"
  exit 1
fi

# Check if user is authenticated with GitHub CLI
if ! gh auth status >/dev/null 2>&1; then
  red "Error: Not authenticated with GitHub CLI"
  echo "Please run: gh auth login"
  exit 1
fi

# Get repository information
REPO_NAME=$(basename "$(git rev-parse --show-toplevel)")
GIT_REMOTE_URL=$(git config --get remote.origin.url 2>/dev/null || echo "")

# Extract owner/repo from remote URL if it exists
if [[ -n "$GIT_REMOTE_URL" ]]; then
  if [[ "$GIT_REMOTE_URL" =~ github\.com[:/]([^/]+)/([^/]+)(\.git)?$ ]]; then
    REPO_OWNER="${BASH_REMATCH[1]}"
    REPO_NAME="${BASH_REMATCH[2]%.git}" # Remove .git suffix if present
    REPO_FULL_NAME="$REPO_OWNER/$REPO_NAME"
  else
    yellow "Warning: Could not parse GitHub repository from remote URL: $GIT_REMOTE_URL"
    REPO_FULL_NAME=""
  fi
else
  # No remote configured, use current user and directory name
  CURRENT_USER=$(gh api user --jq '.login')
  REPO_FULL_NAME="$CURRENT_USER/$REPO_NAME"
fi

check_repo_exists() {
  local repo="$1"
  if gh repo view "$repo" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

create_github_repo() {
  local repo_name="$1"
  local description="$2"

  blue "Creating GitHub repository: $repo_name"

  # Create repository (private by default, can be changed with --public flag)
  if gh repo create "$repo_name" --private --description "$description" --confirm; then
    green "Repository created successfully: https://github.com/$repo_name"

    # Add remote if it doesn't exist
    if ! git config --get remote.origin.url >/dev/null 2>&1; then
      blue "Adding remote origin..."
      git remote add origin "https://github.com/$repo_name.git"
    fi

    # Push current branch to set up remote tracking
    CURRENT_BRANCH=$(git branch --show-current)
    if [[ -n "$CURRENT_BRANCH" ]]; then
      blue "Pushing $CURRENT_BRANCH to remote..."
      git push -u origin "$CURRENT_BRANCH"
    fi

    return 0
  else
    red "Failed to create repository"
    return 1
  fi
}

# Main logic
if [[ -z "$REPO_FULL_NAME" ]]; then
  red "Error: Could not determine repository name"
  echo "Please ensure you're in a git repository with a proper remote URL or run this from a directory you want to create a repo for."
  exit 1
fi

blue "Checking GitHub repository: $REPO_FULL_NAME"

if check_repo_exists "$REPO_FULL_NAME"; then
  green "✓ GitHub repository exists: https://github.com/$REPO_FULL_NAME"
  exit 0
else
  yellow "⚠ GitHub repository does not exist: $REPO_FULL_NAME"

  if [[ "$AUTO_CREATE" == "--auto-create" ]]; then
    # Auto-create mode
    PROJECT_DESCRIPTION="Generated by SpecPilot - Project specification and task management"
    create_github_repo "$REPO_FULL_NAME" "$PROJECT_DESCRIPTION"
  else
    # Interactive mode
    echo ""
    echo "Options:"
    echo "1. Create repository automatically"
    echo "2. Create repository manually (opens GitHub)"
    echo "3. Skip (you'll need to create it manually later)"
    echo ""
    read -p "Choose option (1/2/3): " choice

    case $choice in
      1)
        PROJECT_DESCRIPTION="Generated by SpecPilot - Project specification and task management"
        create_github_repo "$REPO_FULL_NAME" "$PROJECT_DESCRIPTION"
        ;;
      2)
        blue "Opening GitHub to create repository manually..."
        gh repo create "$REPO_FULL_NAME" --web
        echo ""
        yellow "After creating the repository manually:"
        echo "1. Add remote: git remote add origin https://github.com/$REPO_FULL_NAME.git"
        echo "2. Push code: git push -u origin main"
        ;;
      3)
        yellow "Skipping repository creation."
        echo "You'll need to create the repository manually before using GitHub operations."
        exit 1
        ;;
      *)
        red "Invalid choice. Exiting."
        exit 1
        ;;
    esac
  fi
fi
